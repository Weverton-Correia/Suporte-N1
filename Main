# =============================================
# Script Profissional de Suporte N1 com Logs
# Autor: Weverton
# =============================================

# Criar diretório de logs
$logDir = "C:\SuporteN1_Logs"
if (-not (Test-Path $logDir)) { New-Item -Path $logDir -ItemType Directory | Out-Null }

# Log único por sessão
$global:logFile = "$logDir\Log_SuporteN1_$(Get-Date -Format yyyyMMdd_HHmmss).txt"

function Write-Log {
    param ([string]$mensagem)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $linha = "$timestamp - $mensagem"
    Write-Host $linha
    Add-Content -Path $global:logFile -Value $linha
}

# Verificação de execução como Administrador
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "⚠️ Este script precisa ser executado como Administrador."
    exit
}

function Limpar-Temporarios {
    Write-Log "Iniciando limpeza de arquivos temporários..."
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Log "Arquivos temporários removidos."
}

function Limpar-CachePowerBI {
    Write-Log "Iniciando limpeza de cache do Power BI..."
    Remove-Item "$env:LOCALAPPDATA\Microsoft\PowerBI\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Log "Cache do Power BI limpo."
}

function Limpar-Navegadores {
    Write-Log "Iniciando limpeza de navegadores..."
    # Chrome
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Google\Chrome\User Data\Default\History" -Force -ErrorAction SilentlyContinue
    # Edge
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\Cache\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default\History" -Force -ErrorAction SilentlyContinue
    # Firefox
    Remove-Item "$env:APPDATA\Mozilla\Firefox\Profiles\*\cache2\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Log "Cache dos navegadores limpo."
}

function Verificar-IntegridadeWindows {
    Write-Log "Iniciando verificação de integridade do Windows..."
    $relatorio = sfc /scannow 2>&1
    $arquivo = "$logDir\Verificacao_Integridade_$(Get-Date -Format yyyyMMdd_HHmmss).txt"
    $relatorio | Out-File $arquivo
    Write-Log "Verificação concluída. Relatório salvo em $arquivo"
}

function Testar-ConexaoRede {
    Write-Log "Iniciando teste de conexão de rede..."
    $arquivo = "$logDir\Teste_Rede_$(Get-Date -Format yyyyMMdd_HHmmss).txt"
    Test-Connection google.com -Count 4 | Out-File $arquivo
    Get-NetIPConfiguration | Out-File $arquivo -Append
    Write-Log "Teste de rede concluído. Relatório salvo em $arquivo"
}

function Atualizar-Windows {
    Write-Log "Verificando atualizações do Windows..."
    if (-not (Get-Module -ListAvailable -Name PSWindowsUpdate)) {
        Install-Module PSWindowsUpdate -Force -Scope CurrentUser
    }
    Import-Module PSWindowsUpdate
    $relatorio = Get-WindowsUpdate -Install -AcceptAll -IgnoreReboot
    $arquivo = "$logDir\Atualizacao_Windows_$(Get-Date -Format yyyyMMdd_HHmmss).txt"
    $relatorio | Out-File $arquivo
    Write-Log "Atualização concluída. Relatório salvo em $arquivo"
}

function Reiniciar-Maquina {
    Write-Log "Reiniciando máquina..."
    Restart-Computer -Force
}

function Relatorio-HardwareSoftware {
    Write-Log "Gerando relatório de hardware e software..."
    $relatorio = Get-ComputerInfo | Select-Object CsName, WindowsVersion, OsArchitecture, CsTotalPhysicalMemory
    $softwares = Get-Package | Select-Object Name, Version, ProviderName
    $arquivo = "$logDir\Relatorio_HW_SW_$(Get-Date -Format yyyyMMdd_HHmmss).txt"
    $relatorio | Out-File $arquivo
    $softwares | Out-File $arquivo -Append
    Write-Log "Relatório salvo em $arquivo"
}

function Reset-Rede {
    Write-Log "Resetando rede (IP release/renew e flush DNS)..."
    ipconfig /release
    ipconfig /renew
    ipconfig /flushdns
    Write-Log "Rede resetada."
}

function Backup-DocumentosDesktop {
    $destino = "C:\Backup_Rapido"
    Write-Log "Iniciando backup compactado de Documentos e Desktop..."
    New-Item -Path $destino -ItemType Directory -Force | Out-Null
    $zipFile = "$destino\Backup_$(Get-Date -Format yyyyMMdd_HHmmss).zip"
    Compress-Archive -Path "$env:USERPROFILE\Documents","$env:USERPROFILE\Desktop" -DestinationPath $zipFile -Force
    Write-Log "Backup concluído em $zipFile"
}

function Verificar-ServicosEssenciais {
    Write-Log "Verificando serviços essenciais..."
    $servicos = @("wuauserv","Spooler","MpsSvc")
    $arquivo = "$logDir\Servicos_Essenciais_$(Get-Date -Format yyyyMMdd_HHmmss).csv"
    Get-Service $servicos | Select-Object DisplayName, Status | Export-Csv $arquivo -NoTypeInformation -Encoding UTF8
    Write-Log "Relatório salvo em $arquivo"
}

function Scan-WindowsDefender {
    Write-Log "Iniciando scan rápido do Windows Defender..."
    Start-MpScan -ScanType QuickScan
    Write-Log "Scan concluído."
}

function Processos-Pesados {
    Write-Log "Gerando inventário de processos que mais consomem CPU..."
    $arquivo = "$logDir\Processos_Pesados_$(Get-Date -Format yyyyMMdd_HHmmss).txt"
    Get-Process | Sort-Object CPU -Descending | Select -First 15 | Out-File $arquivo
    Write-Log "Inventário salvo em $arquivo"
}

# Menu principal
function Menu-N1 {
    Clear-Host
    Write-Host "========================================="
    Write-Host "   Suporte N1 Profissional - Menu Interativo "
    Write-Host "========================================="
    Write-Host "1. Limpar arquivos temporários"
    Write-Host "2. Limpar cache do Power BI"
    Write-Host "3. Limpar navegadores (Chrome, Edge, Firefox)"
    Write-Host "4. Verificar integridade do Windows"
    Write-Host "5. Testar conexão de rede"
    Write-Host "6. Atualizar Windows"
    Write-Host "7. Reiniciar máquina"
    Write-Host "8. Relatório de hardware e software"
    Write-Host "9. Resetar rede"
    Write-Host "10. Backup rápido (zip) de Documentos e Desktop"
    Write-Host "11. Verificar serviços essenciais"
    Write-Host "12. Scan rápido Windows Defender"
    Write-Host "13. Inventário de processos pesados"
    Write-Host "14. Sair"
    Write-Host "========================================="

    $escolha = Read-Host "Escolha uma opção (1-14)"

    switch ($escolha) {
        "1" { Limpar-Temporarios }
        "2" { Limpar-CachePowerBI }
        "3" { Limpar-Navegadores }
        "4" { Verificar-IntegridadeWindows }
        "5" { Testar-ConexaoRede }
        "6" { Atualizar-Windows }
        "7" { Reiniciar-Maquina }
        "8" { Relatorio-HardwareSoftware }
        "9" { Reset-Rede }
        "10" { Backup-DocumentosDesktop }
        "11" { Verificar-ServicosEssenciais }
        "12" { Scan-WindowsDefender }
        "13" { Processos-Pesados }
        "14" { Write-Log "Encerrando script."; exit }
        default { Write-Host "Opção inválida, tente novamente." }
    }

    Write-Host "`nPressione qualquer tecla para voltar ao menu..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    Menu-N1
}

# Inicia o menu
Menu-N1
